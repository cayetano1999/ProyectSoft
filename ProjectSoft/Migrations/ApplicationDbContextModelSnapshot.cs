// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ProjectSoft.Models;
using System;

namespace ProjectSoft.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectSoft.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("Usuario");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("ProjectSoft.Models.Clientes.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Estado");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<string>("Foto");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Naturaleza")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("TipoCliente")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ProjectSoft.Models.ProyectosModel.ProyectoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArchivoRar");

                    b.Property<string>("Contrato");

                    b.Property<int>("Id_Proyecto");

                    b.HasKey("Id");

                    b.HasIndex("Id_Proyecto")
                        .IsUnique();

                    b.ToTable("ProyectoFile");
                });

            modelBuilder.Entity("ProjectSoft.Models.ProyectosModel.ProyectoImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Id_Proyecto");

                    b.Property<string>("LogoProyecto");

                    b.Property<string>("Screen1");

                    b.Property<string>("Screen2");

                    b.Property<string>("Screen3");

                    b.HasKey("Id");

                    b.HasIndex("Id_Proyecto")
                        .IsUnique();

                    b.ToTable("ProyectoImg");
                });

            modelBuilder.Entity("ProjectSoft.Models.ProyectosModel.ProyectoInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Costo");

                    b.Property<string>("Creador")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Duracion")
                        .IsRequired();

                    b.Property<string>("Estado");

                    b.Property<int>("Id_Categoria");

                    b.Property<int>("Id_Cliente");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UpLoader")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Id_Categoria");

                    b.HasIndex("Id_Cliente");

                    b.ToTable("ProyectoInfo");
                });

            modelBuilder.Entity("ProjectSoft.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Rol");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("ProjectSoft.Models.UserSesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IsLogin");

                    b.Property<string>("MacAdress");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserSesions");
                });

            modelBuilder.Entity("ProjectSoft.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Estado");

                    b.Property<string>("Foto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("UserAccount")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ProjectSoft.Models.ProyectosModel.ProyectoFile", b =>
                {
                    b.HasOne("ProjectSoft.Models.ProyectosModel.ProyectoInfo", "ProyectoInfo")
                        .WithOne("ProyectoFl")
                        .HasForeignKey("ProjectSoft.Models.ProyectosModel.ProyectoFile", "Id_Proyecto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectSoft.Models.ProyectosModel.ProyectoImg", b =>
                {
                    b.HasOne("ProjectSoft.Models.ProyectosModel.ProyectoInfo", "ProyectoInfo")
                        .WithOne("ProyectoImg")
                        .HasForeignKey("ProjectSoft.Models.ProyectosModel.ProyectoImg", "Id_Proyecto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectSoft.Models.ProyectosModel.ProyectoInfo", b =>
                {
                    b.HasOne("ProjectSoft.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("Id_Categoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectSoft.Models.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("Id_Cliente")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
